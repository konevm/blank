{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": ["./tsconfig.json"],
    "extraFileExtensions": [".css", ".md"]
  },
  "ignorePatterns": ["**/*.css", "**/*.scss"],
  "extends": [
    "prettier",
    "eslint:recommended",
    "plugin:unicorn/recommended",
    "plugin:react/jsx-runtime",
    "plugin:react/recommended",
    "plugin:import/typescript",
    "plugin:import/recommended",
    "plugin:promise/recommended",
    "plugin:react-perf/recommended",
    "plugin:react-hooks/recommended",
    "plugin:eslint-comments/recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:prettier/recommended"
  ],
  "rules": {
    "eslint-comments/require-description": "error",
    "@typescript-eslint/no-unused-vars": 2,
    "prettier/prettier": [
      "error",
      {
        "endOfLine": "auto",
        "prefer-arrow-callback": "error",
        "arrow-body-style": "error"
      }
    ],
    "import/no-default-export": 2,
    "import/no-anonymous-default-export": 2,
    "import/exports-last": 2,
    "import/group-exports": 2,
    "unicorn/prevent-abbreviations": ["off"],
    "unicorn/filename-case": [
      "error",
      {
        "cases": {
          "camelCase": true,
          "pascalCase": true
        },
        "ignore": ["react-app-env.d.ts"]
      }
    ],
    "import/order": [
      "error",
      {
        "pathGroups": [
          {
            "pattern": "**/*.css",
            "group": "type",
            "position": "after"
          },
          {
            "pattern": "**/*.scss",
            "group": "type",
            "position": "after"
          }
        ],
        "groups": [
          "builtin",
          "external",
          ["internal", "sibling", "index", "object"],
          "unknown",
          "type"
        ],
        "newlines-between": "always"
      }
    ]
  },
  "settings": {
    "import/parsers": {
      "@typescript-eslint/parser": [".ts", ".tsx"]
    },
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true,
        "project": ["node_modules/*/tsconfig.json"]
      }
    },
    "import/extensions": [".ts", ".tsx"],
    "overrides": [
      {
        "files": [".tsx", ".ts"],
        "extends": "plugin:@typescript-eslint/recommended-requiring-type-checking"
      }
    ],
    "react": {
      "createClass": "createReactClass", // Regex for Component Factory to use,
      // default to "createReactClass"
      "pragma": "React", // Pragma to use, default to "React"
      "fragment": "Fragment", // Fragment to use (may be a property of <pragma>), default to "Fragment"
      "version": "detect", // React version. "detect" automatically picks the version you have installed.
      // You can also use `16.0`, `16.3`, etc, if you want to override the detected value.
      // It will default to "latest" and warn if missing, and to "detect" in the future
      "flowVersion": "0.53" // Flow version
    },
    "propWrapperFunctions": [
      // The names of any function used to wrap propTypes, e.g. `forbidExtraProps`. If this isn't set, any propTypes wrapped in a function will be skipped.
      "forbidExtraProps",
      { "property": "freeze", "object": "Object" },
      { "property": "myFavoriteWrapper" },
      // for rules that check exact prop wrappers
      { "property": "forbidExtraProps", "exact": true }
    ],
    "componentWrapperFunctions": [
      // The name of any function used to wrap components, e.g. Mobx `observer` function. If this isn't set, components wrapped by these functions will be skipped.
      "observer", // `property`
      { "property": "styled" }, // `object` is optional
      { "property": "observer", "object": "Mobx" },
      { "property": "observer", "object": "<pragma>" } // sets `object` to whatever value `settings.react.pragma` is set to
    ],
    "formComponents": [
      // Components used as alternatives to <form> for forms, eg. <Form endpoint={ url } />
      "CustomForm",
      { "name": "Form", "formAttribute": "endpoint" }
    ],
    "linkComponents": [
      // Components used as alternatives to <a> for linking, eg. <Link to={ url } />
      "Hyperlink",
      { "name": "Link", "linkAttribute": "to" }
    ]
  }
}
